{"version":3,"sources":["htmldiff.coffee"],"names":[],"mappings":"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","file":"htmldiff.js","sourceRoot":"/source/","sourcesContent":["is_end_of_tag = (char)-> char is '>'\nis_start_of_tag = (char)-> char is '<'\nis_whitespace = (char)-> /^\\s+$/.test char\nis_tag = (token)-> /^\\s*<[^>]+>\\s*$/.test token\nisnt_tag = (token)-> not is_tag token\n\nclass Match\n  constructor: (@start_in_before, @start_in_after, @length)->\n    @end_in_before = (@start_in_before + @length) - 1\n    @end_in_after = (@start_in_after + @length) - 1\n\nhtml_to_tokens = (html)->\n  mode = 'char'\n  current_word = ''\n  words = []\n\n  for char in html\n    switch mode\n      when 'tag'\n        if is_end_of_tag char\n          current_word += '>'\n          words.push current_word\n          current_word = ''\n          if is_whitespace char\n            mode = 'whitespace'\n          else\n            mode = 'char'\n        else\n          current_word += char\n      when 'char'\n        if is_start_of_tag char\n          words.push current_word if current_word\n          current_word = '<'\n          mode = 'tag'\n        else if /\\s/.test char\n          words.push current_word if current_word\n          current_word = char\n          mode = 'whitespace'\n        else if /[\\w\\#@]+/i.test char\n          current_word += char\n        else\n          words.push current_word if current_word\n          current_word = char\n      when 'whitespace'\n        if is_start_of_tag char\n          words.push current_word if current_word\n          current_word = '<'\n          mode = 'tag'\n        else if is_whitespace char\n          current_word += char\n        else\n          words.push current_word if current_word\n          current_word = char\n          mode = 'char'\n      else throw new Error \"Unknown mode #{mode}\"\n\n  words.push current_word if current_word\n  return words\n\nfind_match = (before_tokens, after_tokens,\n  index_of_before_locations_in_after_tokens,\n  start_in_before, end_in_before,\n  start_in_after, end_in_after)->\n\n  best_match_in_before = start_in_before\n  best_match_in_after = start_in_after\n  best_match_length = 0\n\n  match_length_at = {}\n\n  for index_in_before in [start_in_before...end_in_before]\n    new_match_length_at = {}\n    looking_for = before_tokens[index_in_before]\n    locations_in_after =\n      index_of_before_locations_in_after_tokens[looking_for]\n\n    for index_in_after in locations_in_after\n      continue if index_in_after < start_in_after\n      break if index_in_after >= end_in_after\n\n      unless match_length_at[index_in_after - 1]?\n        match_length_at[index_in_after - 1] = 0\n      new_match_length = match_length_at[index_in_after - 1] + 1\n      new_match_length_at[index_in_after] = new_match_length\n\n      if new_match_length > best_match_length\n        best_match_in_before = index_in_before - new_match_length + 1\n        best_match_in_after = index_in_after - new_match_length + 1\n        best_match_length = new_match_length\n\n    match_length_at = new_match_length_at\n\n  unless best_match_length is 0\n    match = (new Match best_match_in_before, best_match_in_after,\\\n    best_match_length)\n\n  return match\n\nrecursively_find_matching_blocks = (before_tokens, after_tokens,\n  index_of_before_locations_in_after_tokens,\n  start_in_before, end_in_before,\n  start_in_after, end_in_after,\n  matching_blocks)->\n\n  match = (find_match before_tokens, after_tokens,\n    index_of_before_locations_in_after_tokens,\n    start_in_before, end_in_before,\n    start_in_after, end_in_after)\n\n  if match?\n    if start_in_before < match.start_in_before\\\n    and start_in_after < match.start_in_after\n      recursively_find_matching_blocks before_tokens, after_tokens,\n        index_of_before_locations_in_after_tokens,\n        start_in_before, match.start_in_before,\n        start_in_after, match.start_in_after,\n        matching_blocks\n\n    matching_blocks.push match\n\n    if match.end_in_before <= end_in_before\\\n    and match.end_in_after <= end_in_after\n      recursively_find_matching_blocks before_tokens, after_tokens,\n        index_of_before_locations_in_after_tokens,\n        match.end_in_before + 1, end_in_before,\n        match.end_in_after + 1, end_in_after,\n        matching_blocks\n\n  return matching_blocks\n\ncreate_index = (p)->\n  throw new Error 'params must have find_these key' unless p.find_these?\n  throw new Error 'params must have in_these key' unless p.in_these?\n\n  index = {}\n  for token in p.find_these\n    index[token] = []\n    idx = p.in_these.indexOf token\n    while idx isnt -1\n      index[token].push idx\n      idx = p.in_these.indexOf token, idx+1\n\n  return index\n\nfind_matching_blocks = (before_tokens, after_tokens)->\n  matching_blocks = []\n  index_of_before_locations_in_after_tokens =\n    create_index\n      find_these: before_tokens\n      in_these: after_tokens\n\n  recursively_find_matching_blocks before_tokens, after_tokens,\n    index_of_before_locations_in_after_tokens,\n    0, before_tokens.length,\n    0, after_tokens.length,\n    matching_blocks\n\ncalculate_operations = (before_tokens, after_tokens)->\n  throw new Error 'before_tokens?' unless before_tokens?\n  throw new Error 'after_tokens?' unless after_tokens?\n  position_in_before = position_in_after = 0\n  operations = []\n  action_map =\n    'false,false': 'replace'\n    'true,false' : 'insert'\n    'false,true' : 'delete'\n    'true,true'  : 'none'\n\n  matches = find_matching_blocks before_tokens, after_tokens\n  matches.push new Match before_tokens.length,  after_tokens.length, 0\n\n  for match, index in matches\n    match_starts_at_current_position_in_before =\n      position_in_before is match.start_in_before\n    match_starts_at_current_position_in_after =\n      position_in_after is match.start_in_after\n\n    action_up_to_match_positions =\n    action_map[[match_starts_at_current_position_in_before,\\\n    match_starts_at_current_position_in_after].toString()]\n\n    if action_up_to_match_positions isnt 'none'\n      operations.push\n        action: action_up_to_match_positions\n        start_in_before: position_in_before\n        end_in_before: (match.start_in_before - 1 \\\n        unless action_up_to_match_positions is 'insert')\n        start_in_after: position_in_after\n        end_in_after: (match.start_in_after - 1 \\\n        unless action_up_to_match_positions is 'delete')\n\n    unless match.length is 0\n      operations.push\n        action: 'equal'\n        start_in_before: match.start_in_before\n        end_in_before: match.end_in_before\n        start_in_after: match.start_in_after\n        end_in_after: match.end_in_after\n\n    position_in_before = match.end_in_before + 1\n    position_in_after = match.end_in_after + 1\n\n  post_processed = []\n  last_op = action: 'none'\n  is_single_whitespace = (op)->\n    return no unless op.action is 'equal'\n    return no unless op.end_in_before - op.start_in_before is 0\n    return /^\\s$/.test before_tokens[op.start_in_before..op.end_in_before]\n\n  for op in operations\n    if ((is_single_whitespace op) and last_op.action is 'replace') or\n    (op.action is 'replace' and last_op.action is 'replace')\n      last_op.end_in_before = op.end_in_before\n      last_op.end_in_after = op.end_in_after\n    else\n      post_processed.push op\n      last_op = op\n\n  return post_processed\n\nconsecutive_where = (start, content, predicate)->\n  content = content[start..content.length]\n  last_matching_index = undefined\n\n  for token, index in content\n    answer = predicate token\n    last_matching_index = index if answer is yes\n    break if answer is no\n\n  return content[0..last_matching_index] if last_matching_index?\n  return []\n\nwrap = (tag, content)->\n  rendering = ''\n  position = 0\n  length = content.length\n\n  loop\n    break if position >= length\n    non_tags = consecutive_where position, content, isnt_tag\n    position += non_tags.length\n    if non_tags.length isnt 0\n      rendering += \"<#{tag}>#{non_tags.join ''}</#{tag}>\"\n\n    break if position >= length\n    tags = consecutive_where position, content, is_tag\n    position += tags.length\n    rendering += tags.join ''\n\n  return rendering\n\nop_map =\n  equal: (op, before_tokens, after_tokens)->\n    before_tokens[op.start_in_before..op.end_in_before].join ''\n\n  insert: (op, before_tokens, after_tokens)->\n    val = after_tokens[op.start_in_after..op.end_in_after]\n    wrap 'ins', val\n\n  delete: (op, before_tokens, after_tokens)->\n    val = before_tokens[op.start_in_before..op.end_in_before]\n    wrap 'del', val\n\nop_map.replace = (op, before_tokens, after_tokens)->\n  (op_map.delete op, before_tokens, after_tokens) +\n  (op_map.insert op, before_tokens, after_tokens)\n\nrender_operations = (before_tokens, after_tokens, operations)->\n  rendering = ''\n  for op in operations\n    rendering += op_map[op.action] op, before_tokens, after_tokens\n\n  return rendering\n\ndiff = (before, after)->\n  return before if before is after\n\n  before = html_to_tokens before\n  after = html_to_tokens after\n\n  ops = calculate_operations before, after\n\n  render_operations before, after, ops\n\n\ndiff.html_to_tokens = html_to_tokens\ndiff.find_matching_blocks = find_matching_blocks\nfind_matching_blocks.find_match = find_match\nfind_matching_blocks.create_index = create_index\ndiff.calculate_operations = calculate_operations\ndiff.render_operations = render_operations\n\nif typeof define is 'function'\n  define [], ()-> diff\nelse if module?\n  module.exports = diff\nelse\n  this.htmldiff = diff\n"]}